package com.drew.and.colorpicker

import java.math.RoundingMode
import kotlin.math.pow
import kotlin.math.sqrt

val predefinedColors = mapOf(
    // CSS Named Colors
    "AliceBlue" to intArrayOf(240, 248, 255),
    "AntiqueWhite" to intArrayOf(250, 235, 215),
    "Aqua" to intArrayOf(0, 255, 255),
    "Aquamarine" to intArrayOf(127, 255, 212),
    "Azure" to intArrayOf(240, 255, 255),
    "Beige" to intArrayOf(245, 245, 220),
    "Bisque" to intArrayOf(255, 228, 196),
    "Black" to intArrayOf(0, 0, 0),
    "BlanchedAlmond" to intArrayOf(255, 235, 205),
    "Blue" to intArrayOf(0, 0, 255),
    "BlueViolet" to intArrayOf(138, 43, 226),
    "Brown" to intArrayOf(165, 42, 42),
    "BurlyWood" to intArrayOf(222, 184, 135),
    "CadetBlue" to intArrayOf(95, 158, 160),
    "Chartreuse" to intArrayOf(127, 255, 0),
    "Chocolate" to intArrayOf(210, 105, 30),
    "Coral" to intArrayOf(255, 127, 80),
    "CornflowerBlue" to intArrayOf(100, 149, 237),
    "Cornsilk" to intArrayOf(255, 248, 220),
    "Crimson" to intArrayOf(220, 20, 60),
    "Cyan" to intArrayOf(0, 255, 255),
    "DarkBlue" to intArrayOf(0, 0, 139),
    "DarkCyan" to intArrayOf(0, 139, 139),
    "DarkGoldenRod" to intArrayOf(184, 134, 11),
    "DarkGray" to intArrayOf(169, 169, 169),
    "DarkGreen" to intArrayOf(0, 100, 0),
    "DarkKhaki" to intArrayOf(189, 183, 107),
    "DarkMagenta" to intArrayOf(139, 0, 139),
    "DarkOliveGreen" to intArrayOf(85, 107, 47),
    "DarkOrange" to intArrayOf(255, 140, 0),
    "DarkOrchid" to intArrayOf(153, 50, 204),
    "DarkRed" to intArrayOf(139, 0, 0),
    "DarkSalmon" to intArrayOf(233, 150, 122),
    "DarkSeaGreen" to intArrayOf(143, 188, 143),
    "DarkSlateBlue" to intArrayOf(72, 61, 139),
    "DarkSlateGray" to intArrayOf(47, 79, 79),
    "DarkTurquoise" to intArrayOf(0, 206, 209),
    "DarkViolet" to intArrayOf(148, 0, 211),
    "DeepPink" to intArrayOf(255, 20, 147),
    "DeepSkyBlue" to intArrayOf(0, 191, 255),
    "DimGray" to intArrayOf(105, 105, 105),
    "DodgerBlue" to intArrayOf(30, 144, 255),
    "FireBrick" to intArrayOf(178, 34, 34),
    "FloralWhite" to intArrayOf(255, 250, 240),
    "ForestGreen" to intArrayOf(34, 139, 34),
    "Fuchsia" to intArrayOf(255, 0, 255),
    "Gainsboro" to intArrayOf(220, 220, 220),
    "GhostWhite" to intArrayOf(248, 248, 255),
    "Gold" to intArrayOf(255, 215, 0),
    "GoldenRod" to intArrayOf(218, 165, 32),
    "Gray" to intArrayOf(128, 128, 128),
    "Green" to intArrayOf(0, 128, 0),
    "GreenYellow" to intArrayOf(173, 255, 47),
    "HoneyDew" to intArrayOf(240, 255, 240),
    "HotPink" to intArrayOf(255, 105, 180),
    "IndianRed" to intArrayOf(205, 92, 92),
    "Indigo" to intArrayOf(75, 0, 130),
    "Ivory" to intArrayOf(255, 255, 240),
    "Khaki" to intArrayOf(240, 230, 140),
    "Lavender" to intArrayOf(230, 230, 250),
    "LavenderBlush" to intArrayOf(255, 240, 245),
    "LawnGreen" to intArrayOf(124, 252, 0),
    "LemonChiffon" to intArrayOf(255, 250, 205),
    "LightBlue" to intArrayOf(173, 216, 230),
    "LightCoral" to intArrayOf(240, 128, 128),
    "LightCyan" to intArrayOf(224, 255, 255),
    "LightGoldenRodYellow" to intArrayOf(250, 250, 210),
    "LightGray" to intArrayOf(211, 211, 211),
    "LightGreen" to intArrayOf(144, 238, 144),
    "LightPink" to intArrayOf(255, 182, 193),
    "LightSalmon" to intArrayOf(255, 160, 122),
    "LightSeaGreen" to intArrayOf(32, 178, 170),
    "LightSkyBlue" to intArrayOf(135, 206, 250),
    "LightSlateGray" to intArrayOf(119, 136, 153),
    "LightSteelBlue" to intArrayOf(176, 196, 222),
    "LightYellow" to intArrayOf(255, 255, 224),
    "Lime" to intArrayOf(0, 255, 0),
    "LimeGreen" to intArrayOf(50, 205, 50),
    "Linen" to intArrayOf(250, 240, 230),
    "Magenta" to intArrayOf(255, 0, 255),
    "Maroon" to intArrayOf(128, 0, 0),
    "MediumAquaMarine" to intArrayOf(102, 205, 170),
    "MediumBlue" to intArrayOf(0, 0, 205),
    "MediumOrchid" to intArrayOf(186, 85, 211),
    "MediumPurple" to intArrayOf(147, 112, 219),
    "MediumSeaGreen" to intArrayOf(60, 179, 113),
    "MediumSlateBlue" to intArrayOf(123, 104, 238),
    "MediumSpringGreen" to intArrayOf(0, 250, 154),
    "MediumTurquoise" to intArrayOf(72, 209, 204),
    "MediumVioletRed" to intArrayOf(199, 21, 133),
    "MidnightBlue" to intArrayOf(25, 25, 112),
    "MintCream" to intArrayOf(245, 255, 250),
    "MistyRose" to intArrayOf(255, 228, 225),
    "Moccasin" to intArrayOf(255, 228, 181),
    "NavajoWhite" to intArrayOf(255, 222, 173),
    "Navy" to intArrayOf(0, 0, 128),
    "OldLace" to intArrayOf(253, 245, 230),
    "Olive" to intArrayOf(128, 128, 0),
    "OliveDrab" to intArrayOf(107, 142, 35),
    "Orange" to intArrayOf(255, 165, 0),
    "OrangeRed" to intArrayOf(255, 69, 0),
    "Orchid" to intArrayOf(218, 112, 214),
    "PaleGoldenRod" to intArrayOf(238, 232, 170),
    "PaleGreen" to intArrayOf(152, 251, 152),
    "PaleTurquoise" to intArrayOf(175, 238, 238),
    "PaleVioletRed" to intArrayOf(219, 112, 147),
    "PapayaWhip" to intArrayOf(255, 239, 213),
    "PeachPuff" to intArrayOf(255, 218, 185),
    "Peru" to intArrayOf(205, 133, 63),
    "Pink" to intArrayOf(255, 192, 203),
    "Plum" to intArrayOf(221, 160, 221),
    "PowderBlue" to intArrayOf(176, 224, 230),
    "Purple" to intArrayOf(128, 0, 128),
    "RebeccaPurple" to intArrayOf(102, 51, 153),
    "Red" to intArrayOf(255, 0, 0),
    "RosyBrown" to intArrayOf(188, 143, 143),
    "RoyalBlue" to intArrayOf(65, 105, 225),
    "SaddleBrown" to intArrayOf(139, 69, 19),
    "Salmon" to intArrayOf(250, 128, 114),
    "SandyBrown" to intArrayOf(244, 164, 96),
    "SeaGreen" to intArrayOf(46, 139, 87),
    "SeaShell" to intArrayOf(255, 245, 238),
    "Sienna" to intArrayOf(160, 82, 45),
    "Silver" to intArrayOf(192, 192, 192),
    "SkyBlue" to intArrayOf(135, 206, 235),
    "SlateBlue" to intArrayOf(106, 90, 205),
    "SlateGray" to intArrayOf(112, 128, 144),
    "Snow" to intArrayOf(255, 250, 250),
    "SpringGreen" to intArrayOf(0, 255, 127),
    "SteelBlue" to intArrayOf(70, 130, 180),
    "Tan" to intArrayOf(210, 180, 140),
    "Teal" to intArrayOf(0, 128, 128),
    "Thistle" to intArrayOf(216, 191, 216),
    "Tomato" to intArrayOf(255, 99, 71),
    "Turquoise" to intArrayOf(64, 224, 208),
    "Violet" to intArrayOf(238, 130, 238),
    "Wheat" to intArrayOf(245, 222, 179),
    "White" to intArrayOf(255, 255, 255),
    "WhiteSmoke" to intArrayOf(245, 245, 245),
    "Yellow" to intArrayOf(255, 255, 0),
    "YellowGreen" to intArrayOf(154, 205, 50),

    // Additional X11 Colors
    "X11Maroon" to intArrayOf(176, 48, 96),
    "X11BrightRed" to intArrayOf(255, 0, 0),
    "X11BrickRed" to intArrayOf(203, 65, 84),
    "X11Orange" to intArrayOf(255, 165, 0),
    "X11Olive" to intArrayOf(107, 142, 35),
    "X11LightGreen" to intArrayOf(144, 238, 144),
    "X11DarkGreen" to intArrayOf(0, 100, 0),
    "X11MidnightBlue" to intArrayOf(25, 25, 112),
    "X11NavyBlue" to intArrayOf(0, 0, 128),
    "X11DarkBlue" to intArrayOf(0, 0, 139),
    "X11Cyan" to intArrayOf(0, 255, 255),
    "X11Teal" to intArrayOf(0, 128, 128),
    "X11SlateGray" to intArrayOf(112, 128, 144),

    // Additional Resene Colors
    "ReseneBlack" to intArrayOf(0, 0, 0),
    "ReseneWhite" to intArrayOf(255, 255, 255),
    "ReseneRed" to intArrayOf(255, 0, 0),
    "ReseneGreen" to intArrayOf(0, 128, 0),
    "ReseneBlue" to intArrayOf(0, 0, 255),
    "ReseneYellow" to intArrayOf(255, 255, 0),
    "ReseneOrange" to intArrayOf(255, 165, 0),
    "ResenePurple" to intArrayOf(128, 0, 128),
    "ResenePink" to intArrayOf(255, 192, 203),
    "ReseneBrown" to intArrayOf(165, 42, 42),
    "ReseneGray" to intArrayOf(128, 128, 128),
    "ReseneOlive" to intArrayOf(107, 142, 35),
    "ReseneSkyBlue" to intArrayOf(135, 206, 235),
    "ReseneViolet" to intArrayOf(238, 130, 238),
    "ReseneLimeGreen" to intArrayOf(50, 205, 50),
    "ReseneCrimson" to intArrayOf(220, 20, 60),
    "ReseneGold" to intArrayOf(255, 215, 0),
    "ReseneMint" to intArrayOf(245, 255, 250)
)

//Function to calculate euclidean distance between two colors
fun calculateDistance(color1: IntArray, color2: IntArray): Double {
    return sqrt(
        (color1[0] - color2[0]).toDouble().pow(2) +
                (color1[1] - color2[1]).toDouble().pow(2) +
                (color1[2] - color2[2]).toDouble().pow(2)
    )
}

fun findClosestColor(rgb: IntArray): String {
    val maxDistance = sqrt(3 * 255.0.pow(2))
    var closestColor = ""
    var minDistance = Double.MAX_VALUE

    predefinedColors.forEach { (name, color) ->
        val distance = calculateDistance(color, rgb)
        if (distance < minDistance) {
            minDistance = distance
            closestColor = name
        }
    }
    //Convert distance to percentage
    val matchPercentage = ((maxDistance - minDistance) / maxDistance) * 100
    return "${matchPercentage.toBigDecimal().setScale(0, RoundingMode.UP)}% $closestColor"
}